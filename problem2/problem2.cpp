#include <iostream>
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.
static int limit = 15;

int fibonacci() {
  int sum, previous = 0;
  int current = sum = 1;
  std::cout << "Sequence: " << current;
  while (current < limit) {
    int tmp = current;
    current = previous + current;
    std::cout << ", " << current;
    sum += current;
    previous = tmp;
  }
  std::cout << "." << std::endl;
  return(sum);
}

int fibonacciRecursive(int previous, int current, int sum) {
  int next = previous + current;
  std::cout << ", " <<  next;
  sum += next;
  if (next <= limit) {
    sum = fibonacciRecursive(current, next, sum);
  }
  return sum;
}

int fibRecWrap(int previous, int current, int sum) {
  std::cout << "Sequence: " << current;
  int ret = fibonacciRecursive(previous, current, sum);
  std::cout << "." << std::endl;
  return(ret);
}

int main() {
  std::cout << "Sum: " << fibonacci() << std::endl;
  std::cout << "Sum: " << fibRecWrap(0, 1, 1) << std::endl;
  return(1);
}

